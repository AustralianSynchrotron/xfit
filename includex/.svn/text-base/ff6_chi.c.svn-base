/***********************************************************************}
{                                                                       }
{  This file contains the routine used to convert the files.dat and     }
{  feffxxxx.dat files generated by FEFF 6.01 into total EXAFS.          }
{                                                                       }
{  It is a conversion of the subroutine ff2chi from FEFF 6.01           }
{                                                                       }
{  input: files.dat + files as listed therein                           }
{                                                                       }
{  Copyright (C)  Paul J. Ellis  University of Sydney  1994.            }
{                                                                       }
{***********************************************************************/

#if !defined (__FF6_CHI_C)

#define __FF6_CHI_C

#include "header.h"

#include "console.h"

#include "ff6_chi.h"

#define Pijump(a,a0) ((a) - floor (0.5 + ((a) - (a0)) / (2 * M_PI)) * 2 * M_PI)

#define VFEFF    "   Feff 6.01"
#define VFF2CHI  " ff2chi 2.01"

  /* E (eV) = BOHR**2 * RYDBERG * k**2 (k in angstrom**-1)

     => k = sqrt (E / (BOHR**2 * RYDBERG)) = 0.5123166 sqrt (E) */

#define EPS4     1e-4
#define NEX      100

#if !defined (HEADER_LINES)

#define HEADER_LINES 32

#endif


  /*********************************************************************}
  {                                                                     }
  {  ff6_chi version 2.0 (14 October 94)                                }
  {                                                                     }
  {    ff6_chi calculates the total multiple-scattering EXAFS per       }
  {    absorbing atom given a set of parameters for the paths           }
  {    geberated by FEFF 6 and the following parameters:                }
  {                                                                     }
  {       Vrcorr  : real part of the E0 correcttion                     }
  {       Vicorr  : imaginary part of the E0 correcttion                }
  {                                                                     }
  {       S02     : overall scale factor                                }
  {       E       : an empirical parameter used in sigms                }
  {                                                                     }
  {       Nam     : number of atoms in the model                        }
  {       pot...m : index of the atomic potential used                  }
  {       Zm      : atomic numbers of the atoms                         }
  {       Nm      : scaling factor for each atom                        }
  {       Rm      : atomic coordinates                                  }
  {       sigma2m : single-scattering temperature factors               }
  {                                                                     }
  {    All of the parameters except Nam and Rm may be varied without    }
  {    rerunning FEFF 6.                                                }
  {                                                                     }
  {*********************************************************************/

int ff6_chi (double print0,

             path_l * path,

             double polar [],

             double Vrcorr, double Vicorr,

             double S02, double E,

             int Nam, double potentialm [],
             double Zm [], double Nm [], double Rm [][3],
             double sigma2m [],

             int Nx, double k [], double chi []) {

    /* Code units for this module are:

                           -1          2
         angstrom, angstrom  , angstrom , eV etc.

       Use complex momentum for Debye-Waller factors.

       */

  int total_paths, paths_used, i;

  double T, Debye_T, factor0, DW_corr, cCW;

  double *chi_mag, *chi_phase, *xk0;

  chi_mag = chi_phase = xk0 = NULL;


    /* Clear the array */

  for (i = 0; i < Nx; i++)

    chi [i] = 0;


    /* Count the total number of paths and the paths actually used. */

  total_paths = paths_used = 0;


  cCW = 0;

  T = Debye_T = 0;

  DW_corr = (T > 0.1);

  factor0 = 1e-15;

  if (print0 >= 0)

    cout (" \n");


    /* Go through the list of paths */

  for (; path; path = path->next) {

    char    description [256];

    double  factor, degeneracy, r_effective, sig2;

    int     legs, l, points, path_number, extrapolate;

    double  Rat [MAX_PATH][3], potential [MAX_PATH], Z [MAX_PATH];

    double  polarisation;

    int     imin;

    double  N [MAX_PATH], sigma2 [MAX_PATH], Ne, ph_DW;

    char    label [MAX_PATH][7];

    int     group [MAX_PATH];

    double  achi   [NEX],
            achix  [NEX],

            xk     [NEX],
            cdelta [NEX],
            afeff  [NEX],
            phfeff [NEX],
            redfac [NEX],
            xlam   [NEX],
            rep    [NEX];

    complex ck [NEX], DW;


      /* Is this path used? */

    if (!path->use)

      continue;


    path_number = path->number;

    degeneracy = path->degeneracy;

    sig2 = 0;

    legs = path->legs;


      /* Use all paths ... */

    total_paths++;

    paths_used++;


      /* Print all paths with importance factor >= print0 *
                   importance factor of the strongest path in the list */

    sprintf (description, " %3d ", path_number);


      /* Copy the parameters of the atoms in the path */

    for (l = 0; l < legs; l++) {

      Rat [l][0] = path->v [l][0];
      Rat [l][1] = path->v [l][1];
      Rat [l][2] = path->v [l][2];

      potential [l] = path->potential [l];

      Z [l] = path->Z [l];

      label [l][6] = 0;

      }


      /* Recalculate the Debye-Waller (sig2) and effective path
         length (r_effective) values.

         sigms calculates approximate MS Debye-Waller factor from
         the single-scattering factors.  The estimate is accurate
         for straight paths and becomes less accurate as the bends
         approach right angles. */

    sprintf (description + strlen (description), " : ");


      /* Get N, sigma2 and group for each atom in the path */

    for (l = 0; l < legs; l++) {

        /* Get the index of the atom */

      imin = path->atom [l];

      sprintf (description + strlen (description), "%2d ", imin);

      Rat [l][0] = Rm [imin][0];
      Rat [l][1] = Rm [imin][1];
      Rat [l][2] = Rm [imin][2];

      N [l]      = Nm [imin];
      sigma2 [l] = sigma2m [imin];
      group [l]  = 1;

      }

    Rat [legs][0] = Rat [0][0];
    Rat [legs][1] = Rat [0][1];
    Rat [legs][2] = Rat [0][2];

    Z [legs] = Z [0];

    sig2 = sigms (legs, E, Rat, sigma2, group);


      /* The approximate polarisation factor is printed only */

    polarisation = polarisation_factor (legs, Rat, polar);

    sprintf (description + strlen (description),
                            "%*s :%3.0f :%7.3f :%9.5f",
                            3 * (8 - legs), " ",
                            degeneracy, polarisation, sig2);


    for (r_effective = 0, l = 0; l < legs; l++)

      r_effective += distance3 (Rat [l + 1], Rat [l]) / 2;


      /* Read the EXAFS parameter curves */

    for (i = points = 0; points < NEX && i < path->points;) {

        /* Make complex momentum.

           Add correction to imag. part of energy to xlam.

               Use atomic units for this. */

      double Viryd, preal, xlamb, pimag;

      complex pp2;

      xk     [i] = path->k [i];
      cdelta [i] = path->real_2_phc [i],
      afeff  [i] = path->mag_feff [i],
      phfeff [i] = path->phase [i],
      redfac [i] = path->red_factor [i],
      xlam   [i] = path->lambda [i],
      rep    [i] = path->real_p [i];

      Viryd = Vicorr / RYDBERG;
      preal = rep  [i] * BOHR;
      xlamb = xlam [i] / BOHR;
      pimag = 1 / xlamb;


        /* p2 is p**2, pp2 is p'**2 (p prime squared, new p) */

      pp2.Re = preal * preal - pimag * pimag;
      pp2.Im = Viryd + 2 * preal * pimag;

      ck [i] = __csqrt (pp2);

      xlam [i] = 1 / ck [i].Im;
      rep  [i] = ck [i].Re;


        /* Put everything back into angstrom and angstrom**-1 */

      ck [i].Re = ck [i].Re / BOHR;
      ck [i].Im = ck [i].Im / BOHR;
      xlam  [i] = xlam  [i] * BOHR;
      rep   [i] = rep   [i] / BOHR;

      points = ++i;

      }


      /* Make chi.  Note that |feff| at k = 0 is zero, so we must
         interpolate or extrapolate to find it.  Can interpolate when
         we have data for k < 0.

         The EXAFS is multiplied by the following factor:

                  max (1, N [...]) * min (1, N [...])

         where N [...] is the list of the N factors of the atoms
         along the path.

         All N are divided to make N [0] = 1.

         */

    Ne = N_factor (legs, N);

    extrapolate = -1;

    for (i = 0; i < points; i++) {

      DW.Re = -2 * sig2 * (ck [i].Re * ck [i].Re -
                           ck [i].Im * ck [i].Im);
      DW.Im = -4 * sig2 * (ck [i].Re * ck [i].Im);

      DW = __cexp (DW);

      ph_DW = atan2 (DW.Im, DW.Re);

      if (fabs (xk [i]) < 0.01)

        extrapolate = i;

      else

        achi [i] = Ne * afeff [i] * degeneracy *
                   __cabs (DW) * exp (-2 * r_effective / xlam [i])
                   * redfac [i] * S02 /
                   (fabs (xk [i]) * r_effective * r_effective);

      achix [i] = cdelta [i] + phfeff [i] + ph_DW;

      }


      /* Fill in achi where extrapolation is necessary */

    if (extrapolate == 0)

        /* Extrapolate */

      achi [extrapolate] = 2 * achi [extrapolate + 1] -
                               achi [extrapolate + 2];

    if (extrapolate > 0)

        /* Interpolate */

      achi [extrapolate] = (achi [extrapolate - 1] +
                            achi [extrapolate + 1]) / 2;


      /* Make sure there are no 2 pi jumps in phase */

    for (i = 1; i < points; i++)

      achix [i] = Pijump (achix [i], achix [i - 1]);


      /* Sum chi on the required k grid */

    if (chi_mag == NULL) {

      chi_mag   = calloc_check (Nx, sizeof (double));
      chi_phase = calloc_check (Nx, sizeof (double));
      xk0       = calloc_check (Nx, sizeof (double));


        /* xk0 is the output grid transformed to correspond to xk */

      for (i = 0; i < Nx; i++)

        xk0 [i] = xkp2xk (k [i], Vrcorr);

      }

    interpolate (I_SIMPLE, points, xk, achi, Nx, xk0, chi_mag);
    interpolate (I_SIMPLE, points, xk, achix, Nx, xk0, chi_phase);


      /* Calculate the EXAFS from this path */

    for (i = 0; i < Nx; i++)

      chi_mag [i] *= sin (2 * xk0 [i] * r_effective + chi_phase [i]);


      /* Add it to the overall EXAFS */

    for (i = 0; i < Nx; i++)

      chi [i] += chi_mag [i];


      /* Calculate the importance factor:

         factor = sum (|chi|) */

    factor = 0;

    for (i = 1; i < Nx; i++)

      factor += (fabs (chi_mag [i]) + fabs (chi_mag [i - 1])) * 0.5 * (k [i] - k [i - 1]);

    if (factor > factor0)

      factor0 = factor;

    sprintf (description + strlen (description),
               " :%9.5f :%7.2f%%", r_effective, factor / factor0 * 100);


      /* If the factor exceeds the threshold, print the description */

    if (factor >= print0 * factor0 && print0 >= 0)

      cout (" %s\n", description);

    }

  if (print0 >= 0)

    cout (" \n");

  free_check (chi_mag);
  free_check (chi_phase);
  free_check (xk0);

  return 1;

  }

#endif /* __FF6_CHI_C */
